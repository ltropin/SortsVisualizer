@page "/"
@inject IMatToaster Toaster
<!--<div class="container-fluid position-absolute">-->
<MatThemeProvider Theme="@theme">
    <div class="container position-absolute pt-3 pb-3" style="z-index:1;">

        <MatToastContainer />
        <div class="container bg-white mat-elevation-z12 mt-5 rounded-lg d-flex justify-content-center flex-column">
            <MatTooltip Tooltip="Моднейший проектик от нас" TargetId="header-text" Position="@MatTooltipPosition.Bottom">
                <div id="header-text" class="p-3 display-4 text-center" style="font-family: 'Century Gothic'">
                    Sort Visualizer
                </div>
            </MatTooltip>

            <div class="text-center mat-h4 mat-button">Загрузка исходного изображения</div>
            <div class="form-group p-2">
                <MatFileUpload Label="Выберите картинку" OnChange="@HandleFileSelected"></MatFileUpload>
            </div>

            <div class="pt-3 pb-3 text-center mat-overline">Исходное изображение</div>
            <div class="d-flex justify-content-center pb-3">
                @if (ImgSource.Count > 0)
                {
                    <img class="img-thumbnail" src="data:image/png;base64,@GetBase64(ImgSource.ToArray())" />
                }
            </div>
            <MatDivider></MatDivider>
            <div class="text-center mat-h4 pt-3 mat-button">Настройки</div>

            <div class="mat-layout-grid w-100">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                        <div class="mat-overline">
                            Сектора картинки
                        </div>
                        <div class="d-flex">
                            <MatSelect Disabled="OnPixels" Class="mat-overline" Label="Выберите кол-во секторов" @bind-Value="@SectorDivider">
                                @if (Dividers.Count > 0)
                                {
                                    @foreach (var el in Dividers)
                                    {
                                        <MatOption TValue="int" Value="el" Class="mat-overline">@el</MatOption>
                                    }
                                }
                            </MatSelect>
                        </div>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                        <div class="mat-overline">
                            Изменение картинки
                        </div>
                        <MatButton Outlined="true" OnClick="ShuffleHandler">Перемешать</MatButton>
                        <MatButton Outlined="true" OnClick="SourceHandler">Исходное</MatButton>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                        @if (UpdatingImage)
                        {
                            <div class="mat-overline text-center">
                                Идет обработка изображения...
                            </div>
                            <MatProgressBar Indeterminate="true"></MatProgressBar>
                        }
                        else
                        {
                            <div class="d-flex justify-content-center flex-wrap">
                                <img class="img-thumbnail"
                                     src="data:image/png;base64,@GetPreviewImageBase64(ImgSplitted.ToArray())" />
                            </div>
                        }
                    </div>
                </div>
            </div>
            <MatDivider></MatDivider>
            <div class="text-center mat-h4 pt-3 mat-button">Сортировки</div>
            <div class="mat-layout-grid w-100">
                <div class="mat-layout-grid-inner">
                    <!-- Row -->
                    @foreach (var sortEl in SortAlgData)
                    {
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6 mat-elevation-z5">
                            <div class="pt-3 pb-3 text-center mat-overline">@sortEl.Value.Name</div>


                            @if (sortEl.Value.SectorsList != null && sortEl.Value.SectorsList.Count > 0)
                            {
                                <div class="d-flex justify-content-center flex-wrap pb-2">
                                    <img class="d-block img-thumbnail"
                                         src="data:image/png;base64,@GetBase64(GetImageFromTiles(sortEl.Value.SectorsList.Select(x => x.Data).ToList()).ToArray())" />
                                </div>
                                @if (sortEl.Value.Sorter.Time != null)
                                {
                                    <div class="mat-button text-center p-3">Время: @((int)sortEl.Value.Sorter.Time.TotalMilliseconds) мс</div>
                                }
                                <div class="btn-group w-100 p-3" role="group">
                                    <button type="button" class="btn btn-outline-success mat-button" @onclick="(() => StartSortHandler(sortEl.Key))">Запустить</button>
                                    <button type="button" class="btn btn-outline-danger mat-button" @onclick="(() => StopSortHandler(sortEl.Key))">Остановить</button>
                                    <button type="button" class="btn btn-outline-dark mat-button" @onclick="(() => UpdateImageHandler(sortEl.Key))">Обновить</button>
                                </div>
                            }
                        </div>
                    }

                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                        <MatButton Icon="@MatIconNames.Refresh" Class="w-100 m-1" OnClick="RefreshAll">Обновить все</MatButton>
                        <MatButton Raised="true" Icon="play_arrow" Class="w-100 bg-success m-1" OnClick="StartAll">Запустить все</MatButton>
                    </div>
                </div>
            </div>
        </div>
    </div>
</MatThemeProvider>

@code {

    public enum SortAlgs
    {
        Quick,
        Radix,
        Tim,
        Heap
    }

    Dictionary<SortAlgs, SortData> SortAlgData = new Dictionary<SortAlgs, SortData>()
    {
        [SortAlgs.Quick] = new SortData
        {
            Name = "Быстрая (QuickSort)",
            SectorsList = new List<SortElement>(),
            Sorter = new QS()
        },
        [SortAlgs.Radix] = new SortData
        {
            Name = "Поразрядная (RadixSort)",
            SectorsList = new List<SortElement>(),
            Sorter = new RadixSort()
        },
        [SortAlgs.Heap] = new SortData
        {
            Name = "Пирамидальная (HeapSort)",
            SectorsList = new List<SortElement>(),
            Sorter = new HeapSort()
        },
    };

    List<byte> ImgSplitted = new List<byte>();
    List<SortElement> SourceSectorsList = new List<SortElement>();
    int _sectorDivider = 2;

    public bool OnPixels { get; set; }
    public bool UpdatingImage { get; set; }
    public int SectorDivider
    {
        get => _sectorDivider;
        set
        {
            UpdatingImage = true;
            StateHasChanged();

            _sectorDivider = value;
            TileSize = Side / value;
            ImgSplitted = new List<byte>(ImgSource);
            SetTilesFromImage(ImgSource.ToArray());

            UpdatingImage = false;
        }
    }

    List<int> Dividers = new List<int>();

    string ImgDefaultPath = "wwwroot/img/placeholder.png";

    List<byte> ImgSource = new List<byte>();

    public int Side = 250;

    public int TileSize;

    MatTheme theme = new MatTheme()
    {
        Primary = MatThemeColors.Grey._600.Value,
        Secondary = MatThemeColors.Grey._600.Value,
        Surface = MatThemeColors.Grey._600.Value
    };

    protected override void OnInitialized()
    {
        using var image = Image<Rgb48>.Load(ImgDefaultPath);

        image.Mutate(x => x.Resize(Side, Side));

        using var mem = new MemoryStream();
        image.SaveAsPng(mem);
        ImgSource = mem.ToArray().ToList();
        ImgSplitted = new List<byte>(ImgSource);
        Dividers = GetDividers(Side);
        SectorDivider = 2;
    }

    public void ShuffleHandler(MouseEventArgs e)
    {
        UpdatingImage = true;
        StateHasChanged();

        SourceSectorsList.Shuffle();

        foreach(var algData in SortAlgData)
            algData.Value.SectorsList = new List<SortElement>(SourceSectorsList);

        ImgSplitted = GetImageFromTiles(SourceSectorsList.Select(x => x.Data).ToList());
        UpdatingImage = false;
    }

    public async void StartSortHandler(SortAlgs sort)
    {
        await InvokeAsync(() =>
        {
            SortAlgData[sort].Sorter.Sort(SortAlgData[sort].SectorsList, StateHasChanged);
        });
    }

    public void UpdateImageHandler(SortAlgs sort)
    {
        SortAlgData[sort].SectorsList = new List<SortElement>(SourceSectorsList);
    }

    public async void StopSortHandler(SortAlgs sort)
    {
        await InvokeAsync(() =>
        {
            SortAlgData[sort].Sorter.Stop();
        });
    }

    public async void StartAll()
    {
        await InvokeAsync(() =>
        {
            SortAlgData.ToList().ForEach(x => x.Value.Sorter.Sort(x.Value.SectorsList, StateHasChanged));
        });
    }

    public async void RefreshAll()
    {
        await InvokeAsync(() =>
        {
            SortAlgData.ToList().ForEach(x => x.Value.SectorsList = new List<SortElement>(SourceSectorsList));
        });
    }

    public void SourceHandler(MouseEventArgs e)
    {
        ImgSplitted = new List<byte>(ImgSource);
    }

    public string GetPreviewImageBase64(byte[] data)
    {
        using var image = new MagickImage(data);
        var lines = new Drawables()
                        .StrokeColor(MagickColors.White);
        for (int i = 0; i <= SectorDivider; i++)
        {
            lines = lines.Line(i * TileSize, 0, i * TileSize, Side);
            lines = lines.Line(0, i * TileSize, Side, i * TileSize);
        }

        image.Draw(lines);

        return image.ToBase64();
    }

    private List<byte> GetImageFromTiles(List<List<byte>> data)
    {
        using var image = new Image<Rgba32>(Side, Side);

        for (int i = 0; i < SectorDivider; i++)
        {
            for (int j = 0; j < SectorDivider; j++)
            {
                var curentTile = Image.Load(data[i * SectorDivider + j].ToArray());
                image.Mutate(x => x.DrawImage(curentTile, new Point(i * TileSize, j * TileSize), 1));
            }
        }

        using var mem = new MemoryStream();
        image.SaveAsPng(mem);


        return mem.ToArray().ToList();
    }

    private void SetTilesFromImage(byte[] dataImage)
    {
        SourceSectorsList = new List<SortElement>();
        using var image = Image.Load(dataImage);
        var iter = 0;
        for (int i = 0; i < SectorDivider; i++)
        {
            for (int j = 0; j < SectorDivider; j++)
            {
                var clone = image.Clone();
                clone.Mutate(x => x.Crop(new Rectangle(i * TileSize, j * TileSize, TileSize, TileSize)));
                using var mem = new MemoryStream();
                clone.SaveAsPng(mem);
                SourceSectorsList.Add(new SortElement
                {
                    Value = iter++,
                    Data = mem.ToArray().ToList()
                });
            }
        }
        SortAlgData.ToList().ForEach(x => x.Value.SectorsList = new List<SortElement>(SourceSectorsList));
    }

    public List<int> GetDividers(int value)
    {
        var tempList = new List<int>();
        for (int i = 2; i < value; i++)
            if (value % i == 0) tempList.Add(i);

        return tempList;
    }

    public static string GetBase64(byte[] data) => Convert.ToBase64String(data);

    public async Task HandleFileSelected(IMatFileUploadEntry[] files)
    {
        var picture = files.FirstOrDefault();

        if (picture != null && (picture.Type == "image/png" || picture.Type == "image/jpeg"))
        {
            using var mem = new MemoryStream();
            await picture.WriteToStreamAsync(mem);
            using var image = Image<Rgb48>.Load(mem.ToArray());

            image.Mutate(x => x.Resize(Side, Side));

            using var newMem = new MemoryStream();
            image.SaveAsPng(newMem);
            ImgSource = newMem.ToArray().ToList();
            ImgSplitted = new List<byte>(ImgSource);
            SetTilesFromImage(ImgSplitted.ToArray());

            Toaster.Add("Файл успешно загружен", MatToastType.Success, title: "Успешно!");
        }
        else
        {
            Toaster.Add("Файл должен быть формата PNG или JPEG", MatToastType.Warning, title: "Ошибка!");
        }
    }
}
